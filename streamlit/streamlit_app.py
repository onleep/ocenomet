import json
import streamlit as st
import pandas as pd
import os
import io
import httpx
from datetime import datetime
from io import BytesIO
import logging
from logging.handlers import RotatingFileHandler
from api_client import get_data_page, get_predict_price
from mapping_utils import map_values, map_dataframe, reorder_columns
from api_client import *
from visualization import *

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
log_folder = 'logs'
os.makedirs(log_folder, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = os.path.join(log_folder, 'app.log')
logger = logging.getLogger("app_logger")

if not logger.hasHandlers():
    handler = RotatingFileHandler(log_file, maxBytes=10**6, backupCount=3, encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)

    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
def load_user_dataset(uploaded_file):
    try:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç")
        user_df = pd.read_csv(uploaded_file)
        if set(user_df.columns) != set(cleaned_dataset.columns):
            raise ValueError("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É.")
        return user_df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å URL
@st.cache_data
def load_dataset_from_url(dataset_url):
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å URL: {dataset_url}")
        with httpx.Client(follow_redirects=True) as client:
            response = client.get(dataset_url)
            response.raise_for_status()
        file = BytesIO(response.content)
        return pd.read_csv(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@st.cache_data
def load_config(config_path):
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {config_path}")
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        st.error(f"–§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        st.stop()
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞: {e}")
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞: {e}")
        st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CIAN
@st.cache_data
def fetch_data(cian_url):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CIAN –ø–æ —Å—Å—ã–ª–∫–µ: {cian_url}")
        response = get_data_page(cian_url)
        data = response.json()
        result = pd.json_normalize(data).replace({None: pd.NA})
        if isinstance(result, str):
            st.error(result)
            return None
        return result, data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å CIAN: {e}")
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
DATASET_URL = st.secrets["DATASET_URL"]
cleaned_dataset = load_dataset_from_url(DATASET_URL)
data_config = load_config(os.path.join(os.getcwd(), 'streamlit', 'data_config.json'))
limits = data_config['limits']
categories = data_config['categories']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if "last_mode" not in st.session_state:
    st.session_state["last_mode"] = None
if "show_model_settings" not in st.session_state:
    st.session_state["show_model_settings"] = False
if "current_page" not in st.session_state:
    st.session_state["current_page"] = "main"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
def settings_page():
    st.session_state["current_page"] = "settings"
def main_page():
    st.session_state["current_page"] = "main"


if st.session_state["current_page"] == "main":
    # –†–µ–∂–∏–º "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ cian"
    st.title("–ü—Ä–µ–¥—Å–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º")
    mode = st.sidebar.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", ["–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ cian", "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"])

    expander = st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False)
    with expander:
        
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
        st.subheader("üìÇ –î–∞—Ç–∞—Å–µ—Ç")
        st.caption("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞.")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (CSV):", type="csv")

        if uploaded_file:
            try:
                user_dataset = load_user_dataset(uploaded_file)
                st.success("–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                working_dataset = user_dataset
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞—Ç–∞—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        # st.divider()

        st.subheader("üîß –ú–æ–¥–µ–ª–∏")
        st.caption("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏.")
        st.button("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π", on_click=settings_page)

    if mode == "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ cian":
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ")
        cian_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ cian")

        if cian_url:
            result, data = fetch_data(cian_url)
            if result is not None:
                result = result.loc[:, ~result.columns.duplicated()]
                if 'publication_at' in result.columns:
                    result['publication_at'] = pd.to_datetime(result['publication_at'], unit='s')
                result = reorder_columns(map_dataframe(result, direction="to_russian"))

                st.subheader("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                st.dataframe(result)

                result = map_dataframe(result, direction="to_english")
                result_cleaned = result.dropna(axis=1)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                real_price = float(result['price'].iloc[0])
                features = result_cleaned.drop(columns=['price'])
                context_data = features.iloc[0].to_dict()
                predicted_price = get_predict_price(data)

                if isinstance(predicted_price, str):
                    st.subheader("–û—à–∏–±–∫–∞")
                    st.error(predicted_price)
                else: 
                    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    st.subheader("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
                    graphs = create_common_graphs(working_dataset, context_data=context_data, price=real_price, is_real=True)
                    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    for graph in graphs:
                        st.plotly_chart(graph)
                    
                    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    difference, difference_percent = calculate_difference(predicted_price, real_price)

                    st.markdown("### üè° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                    col1, col2 = st.columns(2)

                    with col1:
                        st.metric(
                            label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                            value=f"{predicted_price:,.2f} ‚ÇΩ",
                            delta=f"{difference_percent:.2f}%" if difference_percent != 0 else None
                        )

                    with col2:
                        st.metric(
                            label="–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                            value=f"{real_price:,.2f} ‚ÇΩ"
                        )

                    st.divider()

                    if difference > 0:
                        st.success(
                            f"üí∞ –í—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –≠–∫–æ–Ω–æ–º–∏—è: **{difference:,.2f} ‚ÇΩ** "
                            f"(*{difference_percent:.2f}% –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
                        )
                    else:
                        st.error(
                            f"üö´ –ù–µ –≤—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{-difference:,.2f} ‚ÇΩ** "
                            f"(*{abs(difference_percent):.2f}% –≤—ã—à–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
                        )

    elif mode == "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º":  
        # –†–µ–∂–∏–º "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

        # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã", expanded=True):
            with st.form("input_form"):
                st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã")
                try:
                    total_area = st.slider(
                        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
                        min_value=limits['total_area']['min'],
                        max_value=limits['total_area']['max'],
                        value=limits['total_area']['default_value'],
                        step=1
                    )
                    rooms_count = st.slider(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
                        min_value=limits['rooms_count']['min'],
                        max_value=limits['rooms_count']['max'],
                        value=limits['rooms_count']['default_value'],
                        step=1
                    )
                    flat_type = st.selectbox(
                        "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                        categories['flat_type']['data'],
                        index=categories['flat_type']['data'].index(categories['flat_type']['default_value'])
                    )
                    repair_type = st.selectbox(
                        "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞",
                        categories['repair_type']['data'],
                        index=categories['repair_type']['data'].index(categories['repair_type']['default_value'])
                    )

                    st.subheader("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
                    district = st.selectbox(
                        "–†–∞–π–æ–Ω",
                        categories['district']['data'],
                        index=categories['district']['data'].index(categories['district']['default_value'])
                    )
                    metro = st.selectbox(
                        "–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ",
                        categories['metro']['data'],
                        index=categories['metro']['data'].index(categories['metro']['default_value'])
                    )
                    distance_from_center = st.slider(
                        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)",
                        min_value=float(limits['distance_from_center']['min']),
                        max_value=float(limits['distance_from_center']['max']),
                        value=float(limits['distance_from_center']['default_value']),
                        step=0.1
                    )

                    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞")
                    build_year = st.slider(
                        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
                        min_value=limits['build_year']['min'],
                        max_value=limits['build_year']['max'],
                        value=limits['build_year']['default_value'],
                        step=1
                    )
                    floor_number = st.slider(
                        "–≠—Ç–∞–∂",
                        min_value=limits['floor_number']['min'],
                        max_value=limits['floor_number']['max'],
                        value=limits['floor_number']['default_value'],
                        step=1
                    )
                    material_type = st.selectbox(
                        "–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                        categories['material_type']['data'],
                        index=categories['material_type']['data'].index(categories['material_type']['default_value'])
                    )
                    county = st.selectbox(
                        "–û–∫—Ä—É–≥",
                        categories['county']['data'],
                        index=categories['county']['data'].index(categories['county']['default_value'])
                    )

                    floors_count = st.slider(
                        "–ö–æ–ª-–≤–æ —ç—Ç–∞–∂–µ–π",
                        min_value=limits['floors_count']['min'],
                        max_value=limits['floors_count']['max'],
                        value=limits['floors_count']['default_value'],
                        step=1
                    )

                    st.subheader("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
                    travel_type = st.radio(
                        "–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è",
                        options=categories['travel_type']['data'],
                        index=categories['travel_type']['data'].index(categories['travel_type']['default_value'])
                    )
                    travel_time = st.slider(
                        "–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–º–∏–Ω)",
                        min_value=limits['travel_time']['min'],
                        max_value=limits['travel_time']['max'],
                        value=limits['travel_time']['default_value'],
                        step=1
                    )
                    logger.debug("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
                    st.error(f"–û—à–∏–±–∫–∞: {e}")

                submit_button = st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if submit_button:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'")
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                mapped_values = map_values(material_type, flat_type, repair_type, travel_type)
                current_date = datetime.now()
                timestamp = int(current_date.timestamp())

                input_data = {
                    "total_area": total_area,
                    "rooms_count": rooms_count,
                    "metro": metro,
                    "distance_from_center": distance_from_center,
                    "district": district,
                    "build_year": build_year,
                    "floor_number": floor_number,
                    "floors_count": floors_count,
                    "material_type": mapped_values["material_type"],
                    "county": county,
                    "flat_type": mapped_values["flat_type"],
                    "repair_type": mapped_values["repair_type"],
                    "travel_type": mapped_values["travel_type"],
                    "travel_time": travel_time,
                    "publication_at": timestamp
                }
                logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {input_data}")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                predicted_price = get_predict_price(input_data)

                if isinstance(predicted_price, str):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {predicted_price}")
                    st.subheader("–û—à–∏–±–∫–∞")
                    st.write(predicted_price)
                else:
                    # –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {predicted_price}")
                    st.subheader("–ê–Ω–∞–ª–∏–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    graphs = create_common_graphs(working_dataset, context_data=input_data, price=predicted_price, is_real=False)
                    for graph in graphs:
                        st.plotly_chart(graph)

                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                    col1, col2 = st.columns(2)

                    with col1:
                        st.metric(
                            label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                            value=f"{predicted_price:,.2f} ‚ÇΩ"
                        )

                    with col2:
                        st.metric(
                            label="–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                            value="N/A"
                        )

                    st.divider()
                    st.success(
                        f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{predicted_price:,.2f} ‚ÇΩ**"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                st.error(f"–û—à–∏–±–∫–∞: {e}")

elif st.session_state["current_page"] == "settings":
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π")
    
    placeholder = st.empty()

    st.sidebar.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", on_click=main_page)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –≤—ã–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", "")
    model_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏", ["ls", "lr", "rg"], help="lr - LinearRegression, ls - Lasso, rg - Ridge")
    hyperparameters = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
        '{"alpha": 0.1}',
        help="–û–∂–∏–¥–∞–µ—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç (–ø—Ä–∏–º–µ—Ä: {\"param1\": 0.1, \"param2\": 5})"
    )
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    X_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ X (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)",
        '[{"example_1": 2, "example_2": 3}]',
        help="–û–∂–∏–¥–∞–µ—Ç—Å—è JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä: [{\"example_1\": 2, \"example_2\": 3}])"
    )
    
    y_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ y (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)",
        "[1, 3, 4]",
        help="–û–∂–∏–¥–∞–µ—Ç—Å—è JSON –º–∞—Å—Å–∏–≤ (–ø—Ä–∏–º–µ—Ä: [1, 2, 3])"
    )
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        if not model_id or not X_data or not y_data:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        else:
            try:
                X = pd.read_json(io.StringIO(X_data))
                y = pd.read_json(io.StringIO(y_data))
                try:
                    hyperparams = json.loads(hyperparameters)
                except json.JSONDecodeError as e:
                    hyperparams = {}
                
                result = fit_model(model_id, model_type, hyperparams, X.to_numpy(), y.to_numpy().ravel())
                if isinstance(result, list) and len(result) > 0 and isinstance(result[0], dict) and "message" in result[0]:
                    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                    st.write(result[0]["message"])
                elif isinstance(result, dict):
                    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                    st.json(result)
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.divider()

    # –ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    st.subheader("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π"):
        models_info = list_models()

        if isinstance(models_info, str):
            st.error(models_info)
        else:
            for model_data in models_info:
                models = model_data.get("models", [])
                if not models:
                    st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
                    continue

                for model_data in models_info:
                    models = model_data.get("models", [])
                    if not models:
                        st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
                        continue

                    for model in models:
                        params = model.get('params', {})
                        st.subheader(f"–ú–æ–¥–µ–ª—å ID: {model.get('id', 'N/A')}")
                        st.write(f"–¢–∏–ø –º–æ–¥–µ–ª–∏: {params.get('model_type', 'N/A')}")

                        st.write("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                        hyperparameters = params.get('hyperparameters', {})
                        st.json(hyperparameters)

                        st.write("–ú–µ—Ç—Ä–∏–∫–∏:")
                        st.write(f"  - R2 Score: {params.get('r2', 'N/A')}")
                        st.write(f"–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {params.get('train_time', 'N/A')} —Å–µ–∫—É–Ω–¥")

                        # –ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è
                        learning_curve = params.get('learning_curve', {})
                        if learning_curve:
                            train_sizes = learning_curve.get('train_sizes', [])
                            train_scores = learning_curve.get('train_scores', [])
                            test_scores = learning_curve.get('test_scores', [])

                            if train_sizes and train_scores and test_scores:
                                fig = go.Figure()
                                fig.add_trace(go.Scatter(
                                    x=train_sizes,
                                    y=train_scores,
                                    mode='lines+markers',
                                    name='Train Score'
                                ))
                                fig.add_trace(go.Scatter(
                                    x=train_sizes,
                                    y=test_scores,
                                    mode='lines+markers',
                                    name='Test Score'
                                ))
                                fig.update_layout(
                                    title=f"–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.get('id', 'N/A')} (R¬≤: {params.get('r2', 'N/A')})",
                                    xaxis_title='–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏',
                                    yaxis_title='–°—Ä–µ–¥–Ω–∏–π R¬≤',
                                    legend_title='–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö',
                                    template='plotly_white'
                                )
                                st.plotly_chart(fig)
                            else:
                                st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π –æ–±—É—á–µ–Ω–∏—è.")
                        else:
                            st.write("–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


    st.divider()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏")
    load_model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", key="load_model_id")
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
        if not load_model_id:
            st.error("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏.")
        else:
            result = load_model(load_model_id)
            if isinstance(result, list) and len(result) > 0 and isinstance(result[0], dict) and "message" in result[0]:
                st.success(result[0]["message"])
            elif isinstance(result, str):
                st.error(result)
            else:
                st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")

    st.divider()
    
    # –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    st.subheader("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
    if st.button("–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
        result = unload_model()
        if isinstance(result, list) and len(result) > 0 and isinstance(result[0], dict) and "message" in result[0]:
            st.success(result[0]["message"])
        elif isinstance(result, str):
            st.error(result)
        else:
            st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")

    st.divider()

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    delete_model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", key="delete_model_id")
    if st.button("–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"):
        if not delete_model_id:
            st.error("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏.")
        else:
            result = remove_model(delete_model_id)
            if isinstance(result, list) and len(result) > 0 and isinstance(result[0], dict) and "message" in result[0]:
                st.success(result[0]["message"])
            elif isinstance(result, str):
                st.error(result)
            else:
                st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")

    st.divider()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
    if st.button("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
        result = remove_all_models()
        if isinstance(result, list) and len(result) > 0 and isinstance(result[0], dict) and "message" in result[0]:
            messages = [res["message"] for res in result if "message" in res]
            for message in messages:
                st.success(message)
        elif isinstance(result, str):
            st.error(result)
        else:
            st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")

    st.divider()