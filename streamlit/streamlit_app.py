import json
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import os
import requests
from io import BytesIO
from api_client import get_data_page, get_predict_price
from mapping_utils import map_values, map_dataframe, reorder_columns

def create_common_graphs(df, context_data, price=None, is_real=True):
    graphs = []
    price_label = "–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" if is_real else "–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"

    # 1. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
    fig_price = px.histogram(
        df,
        x='price',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä',
        nbins=50,
        labels={'price': '–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
    )

    if price is not None:
        fig_price.add_vline(
            x=price,
            line_dash="dash",
            line_color="red",
            annotation_text=price_label
        )

    fig_price.update_layout(
        xaxis_title='–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        xaxis=dict(showgrid=True),
        yaxis=dict(showgrid=True)
    )

    graphs.append(fig_price)

    # 2. –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø–ª–æ—â–∞–¥–∏ –∏ —Ü–µ–Ω—ã
    fig_area_price = go.Figure()
    df_aggregated = df.groupby('total_area', as_index=False).agg({'price': 'mean'})

    fig_area_price.add_trace(
        go.Scatter(
            x=df_aggregated['total_area'],
            y=df_aggregated['price'],
            mode='markers',
            marker=dict(size=6, color='blue'),
            name='–î–∞–Ω–Ω—ã–µ'
        )
    )

    if 'total_area' in context_data and pd.notna(context_data.get('total_area')) and price is not None:
        current_total_area = float(context_data.get('total_area', 0))
        current_price = float(price)

        fig_area_price.add_trace(
            go.Scatter(
                x=[current_total_area],
                y=[current_price],
                mode='markers',
                marker=dict(size=10, color='red'),
                name=price_label
            )
        )

    fig_area_price.update_layout(
        title='–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        xaxis=dict(title='–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)', range=[df['total_area'].min(), df['total_area'].max()], showgrid=True),
        yaxis=dict(title='–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)', range=[df['price'].min(), df['price'].max()], showgrid=True),
        legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞")
    )

    graphs.append(fig_area_price)

    # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    fig_rooms_price = px.box(
        df,
        x='rooms_count',
        y='price',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç',
        labels={'rooms_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', 'price': '–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)'}
    )
    if 'rooms_count' in context_data and price is not None:
        fig_rooms_price.add_scatter(
            x=[context_data.get('rooms_count', 0)],
            y=[price],
            mode='markers',
            marker=dict(color='red', size=10),
            name=price_label
        )
    graphs.append(fig_rooms_price)

    # 4. –í–ª–∏—è–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –æ–∫—Ä—É–≥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    df_avg_price_by_county = df.groupby('county', as_index=False).agg({'price': 'mean'})
    target_county = context_data.get('county', None)
    colors = ['red' if county == target_county else 'blue' for county in df_avg_price_by_county['county']]

    fig_district_price = px.bar(
        df_avg_price_by_county,
        x='county',
        y='price',
        title='–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –æ–∫—Ä—É–≥–∞–º',
        labels={'county': '–û–∫—Ä—É–≥', 'price': '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)'},
        text='price'
    )

    fig_district_price.update_traces(
        marker_color=colors,
        texttemplate='%{text:.2s}‚ÇΩ',
        textposition='outside'
    )

    fig_district_price.update_layout(
        xaxis=dict(showgrid=True, gridcolor='rgba(200, 200, 200, 0.3)'),
        yaxis=dict(showgrid=True, gridcolor='rgba(200, 200, 200, 0.3)')
    )

    graphs.append(fig_district_price)


    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–Ω–æ–π
    median_data = {
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)": df['total_area'].median(),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç": df['rooms_count'].median(),
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)": df['distance_from_center'].median(),
        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏": df['build_year'].median()
    }
    user_data = {
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)": float(context_data.get('total_area', 'N/A')) if pd.notna(context_data.get('total_area', None)) else 'N/A',
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç": int(context_data.get('rooms_count', 'N/A')) if pd.notna(context_data.get('rooms_count', None)) else 'N/A',
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)": float(context_data.get('distance_from_center', 'N/A')) if pd.notna(context_data.get('distance_from_center', None)) else 'N/A',
        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏": int(context_data.get('build_year', 'N/A')) if pd.notna(context_data.get('build_year', None)) else 'N/A'
    }
    comparison_df = pd.DataFrame([user_data, median_data], index=["–î–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "–ú–µ–¥–∏–∞–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É"])
    st.write("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –º–µ–¥–∏–∞–Ω–æ–π –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É")
    st.dataframe(comparison_df)

    return graphs

def calculate_difference(predicted_price, real_price):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"""
    difference = predicted_price - real_price
    difference_percent = (difference / real_price) * 100
    return difference, difference_percent

@st.cache_data
def load_dataset_from_url(dataset_url):
    try:
        response = requests.get(dataset_url)
        response.raise_for_status()

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ CSV –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        file = BytesIO(response.content)
        return pd.read_csv(file)
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        st.stop()
    except pd.errors.ParserError as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–∞: {e}")
        st.stop()

@st.cache_data
def load_config(config_path):
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        st.stop()
    except json.JSONDecodeError as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞: {e}")
        st.stop()

@st.cache_data
def fetch_data(cian_url):
    return get_data_page(cian_url)

DATASET_URL = st.secrets["DATASET_URL"]  # URL –∫ —Ñ–∞–π–ª—É –≤ –æ–±–ª–∞–∫–µ

cleaned_dataset = load_dataset_from_url(DATASET_URL)
data_config = load_config(os.path.join(os.getcwd(), 'streamlit', 'data_config.json'))

limits = data_config['limits']
categories = data_config['categories']

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("–ü—Ä–µ–¥—Å–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã")
st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º")
mode = st.sidebar.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", ["–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ cian", "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"])

if mode == "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ cian":
    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ")
    cian_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ cian")

    if cian_url:
        result = fetch_data(cian_url)
        result = reorder_columns(map_dataframe(result, direction="to_russian"))
        
        if isinstance(result, str):
            st.subheader("–û—à–∏–±–∫–∞")
            st.write(result)
        else:
            st.subheader("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            st.dataframe(result)

            result = map_dataframe(result, direction="to_english")
            result_cleaned = result.dropna(axis=1)

            features = result_cleaned.drop(columns=['price'])
            real_price = float(result['price'].iloc[0])
            context_data = features.iloc[0].to_dict()
            input_json = features.to_dict(orient="records")[0]

            predicted_price = get_predict_price(input_json)

            st.subheader("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
            graphs = create_common_graphs(cleaned_dataset, context_data=context_data, price=real_price, is_real=True)
            for graph in graphs:
                st.plotly_chart(graph)

            if isinstance(predicted_price, str):
                st.subheader("–û—à–∏–±–∫–∞")
                st.error(predicted_price)
            else:
                difference, difference_percent = calculate_difference(predicted_price, real_price)

                st.markdown("### üè° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                col1, col2 = st.columns(2)

                with col1:
                    st.metric(
                        label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                        value=f"{predicted_price:,.2f} ‚ÇΩ",
                        delta=f"{difference_percent:.2f}%" if difference_percent != 0 else None
                    )

                with col2:
                    st.metric(
                        label="–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                        value=f"{real_price:,.2f} ‚ÇΩ"
                    )

                st.divider()

                if difference > 0:
                    st.success(
                        f"üí∞ –í—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –≠–∫–æ–Ω–æ–º–∏—è: **{difference:,.2f} ‚ÇΩ** "
                        f"(*{difference_percent:.2f}% –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
                    )
                else:
                    st.error(
                        f"üö´ –ù–µ –≤—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{-difference:,.2f} ‚ÇΩ** "
                        f"(*{abs(difference_percent):.2f}% –≤—ã—à–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
                    )

elif mode == "–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º":  
    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Å–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã", expanded=True):
        with st.form("input_form"):
            st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã")
            total_area = st.slider(
                "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
                min_value=limits['total_area']['min'],
                max_value=limits['total_area']['max'],
                value=limits['total_area']['default_value'],
                step=1
            )
            rooms_count = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
                min_value=limits['rooms_count']['min'],
                max_value=limits['rooms_count']['max'],
                value=limits['rooms_count']['default_value'],
                step=1
            )
            flat_type = st.selectbox(
                "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                categories['flat_type']['data'],
                index=categories['flat_type']['data'].index(categories['flat_type']['default_value'])
            )
            repair_type = st.selectbox(
                "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞",
                categories['repair_type']['data'],
                index=categories['repair_type']['data'].index(categories['repair_type']['default_value'])
            )

            st.subheader("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            district = st.selectbox(
                "–†–∞–π–æ–Ω",
                categories['district']['data'],
                index=categories['district']['data'].index(categories['district']['default_value'])
            )
            metro = st.selectbox(
                "–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ",
                categories['metro']['data'],
                index=categories['metro']['data'].index(categories['metro']['default_value'])
            )
            distance_from_center = st.slider(
                "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)",
                min_value=float(limits['distance_from_center']['min']),
                max_value=float(limits['distance_from_center']['max']),
                value=float(limits['distance_from_center']['default_value']),
                step=0.1
            )

            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞")
            build_year = st.slider(
                "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
                min_value=limits['build_year']['min'],
                max_value=limits['build_year']['max'],
                value=limits['build_year']['default_value'],
                step=1
            )
            floor_number = st.slider(
                "–≠—Ç–∞–∂",
                min_value=limits['floor_number']['min'],
                max_value=limits['floor_number']['max'],
                value=limits['floor_number']['default_value'],
                step=1
            )
            material_type = st.selectbox(
                "–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                categories['material_type']['data'],
                index=categories['material_type']['data'].index(categories['material_type']['default_value'])
            )
            county = st.selectbox(
                "–û–∫—Ä—É–≥",
                categories['county']['data'],
                index=categories['county']['data'].index(categories['county']['default_value'])
            )

            st.subheader("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
            travel_type = st.radio(
                "–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è",
                options=categories['travel_type']['data'],
                index=categories['travel_type']['data'].index(categories['travel_type']['default_value'])
            )
            travel_time = st.slider(
                "–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–º–∏–Ω)",
                min_value=limits['travel_time']['min'],
                max_value=limits['travel_time']['max'],
                value=limits['travel_time']['default_value'],
                step=1
            )

            submit_button = st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")

    if submit_button:
        mapped_values = map_values(material_type, flat_type, repair_type, travel_type)

        input_data = {
            "total_area": total_area,
            "rooms_count": rooms_count,
            "metro": metro,
            "distance_from_center": distance_from_center,
            "district": district,
            "build_year": build_year,
            "floor_number": floor_number,
            "material_type": mapped_values["material_type"],
            "county": county,
            "flat_type": mapped_values["flat_type"],
            "repair_type": mapped_values["repair_type"],
            "travel_type": mapped_values["travel_type"],
            "travel_time": travel_time
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        predicted_price = get_predict_price(input_data)

        if isinstance(predicted_price, str):
            st.subheader("–û—à–∏–±–∫–∞")
            st.write(predicted_price)
        else:
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            graphs = create_common_graphs(cleaned_dataset, context_data=input_data, price=predicted_price, is_real=False)
            for graph in graphs:
                st.plotly_chart(graph)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            col1, col2 = st.columns(2)

            with col1:
                st.metric(
                    label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                    value=f"{predicted_price:,.2f} ‚ÇΩ"
                )

            with col2:
                st.metric(
                    label="–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                    value="N/A"
                )

            st.divider()
            st.success(
                f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{predicted_price:,.2f} ‚ÇΩ**"
            )

