import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

from logger_setup import setup_logger
from tools import calculate_difference

logger = setup_logger()


# –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω,
# –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
def create_common_graphs(df, context_data, price=None, is_real=True):
    graphs = []
    price_label = "–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" if is_real else "–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
    fig_price = px.histogram(
        df,
        x="price",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä",
        nbins=50,
        labels={"price": "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"},
    )

    if price is not None:
        fig_price.add_vline(
            x=price,
            line_dash="dash",
            line_color="red",
            annotation_text=price_label,
        )

    fig_price.update_layout(
        xaxis_title="–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        xaxis=dict(showgrid=True),
        yaxis=dict(showgrid=True),
        legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞"),
    )
    graphs.append(fig_price)

    # –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø–ª–æ—â–∞–¥–∏ –∏ —Ü–µ–Ω—ã
    fig_area_price = go.Figure()
    df_aggregated = df.groupby("total_area", as_index=False).agg({"price": "mean"})

    fig_area_price.add_trace(
        go.Scatter(
            x=df_aggregated["total_area"],
            y=df_aggregated["price"],
            mode="markers",
            marker=dict(size=6, color="blue"),
            name="–î–∞–Ω–Ω—ã–µ",
        )
    )

    if "total_area" in context_data and pd.notna(context_data.get("total_area")):
        fig_area_price.add_trace(
            go.Scatter(
                x=[context_data["total_area"]],
                y=[price],
                mode="markers",
                marker=dict(size=10, color="red"),
                name=price_label,
            )
        )

    fig_area_price.update_layout(
        title="–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
        xaxis=dict(
            title="–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
            range=[df["total_area"].min(), df["total_area"].max()],
            showgrid=True,
        ),
        yaxis=dict(
            title="–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)",
            range=[df["price"].min(), df["price"].max()],
            showgrid=True,
        ),
        legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞"),
    )
    graphs.append(fig_area_price)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
    fig_rooms_price = px.box(
        df,
        x="rooms_count",
        y="price",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç",
        labels={"rooms_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", "price": "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"},
    )

    if "rooms_count" in context_data:
        fig_rooms_price.add_scatter(
            x=[context_data["rooms_count"]],
            y=[price],
            mode="markers",
            marker=dict(color="red", size=10),
            name=price_label,
        )

    fig_rooms_price.update_layout(legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞"))
    graphs.append(fig_rooms_price)

    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –æ–∫—Ä—É–≥–∞–º
    df_avg_price_by_county = df.groupby("county", as_index=False).agg({"price": "mean"})
    target_county = context_data.get("county")
    colors = [
        "red" if county == target_county else "blue"
        for county in df_avg_price_by_county["county"]
    ]

    fig_district_price = px.bar(
        df_avg_price_by_county,
        x="county",
        y="price",
        title="–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –æ–∫—Ä—É–≥–∞–º",
        labels={"county": "–û–∫—Ä—É–≥", "price": "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"},
        text="price",
    )

    fig_district_price.update_traces(
        marker_color=colors,
        texttemplate="%{text:.2s}‚ÇΩ",
        textposition="outside",
    )

    fig_district_price.update_layout(
        xaxis=dict(showgrid=True, gridcolor="rgba(200, 200, 200, 0.3)"),
        yaxis=dict(showgrid=True, gridcolor="rgba(200, 200, 200, 0.3)"),
        legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞"),
    )
    graphs.append(fig_district_price)

    # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    if is_real and "coordinates.lat" in context_data and "coordinates.lng" in context_data:
        lat = context_data["coordinates.lat"]
        lng = context_data["coordinates.lng"]

        if lat is not None and lng is not None:
            fig_map = px.scatter_mapbox(
                lat=[lat],
                lon=[lng],
                hover_name=["–û–±—ä–µ–∫—Ç"],
                color=["–û–±—ä–µ–∫—Ç"],
                size=[5],
                zoom=12,
                mapbox_style="open-street-map",
                color_discrete_sequence=["red"],
            )
            fig_map.update_layout(
                title="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                legend=dict(title="–õ–µ–≥–µ–Ω–¥–∞"),
            )
            graphs.append(fig_map)

    return graphs


# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
def analyze_and_display_results(predicted_price, working_dataset, context_data, real_price=None):
    is_real = real_price is not None

    st.subheader("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞" if is_real else "–ê–Ω–∞–ª–∏–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    graphs = create_common_graphs(
        working_dataset,
        context_data=context_data,
        price=real_price if is_real else predicted_price,
        is_real=is_real,
    )
    
    for graph in graphs:
        st.plotly_chart(graph)

    if is_real:
        difference, difference_percent = calculate_difference(predicted_price, real_price)
    else:
        difference, difference_percent = None, None

    st.markdown("### üè° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    col1, col2 = st.columns(2)

    with col1:
        st.metric(
            label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            value=f"{predicted_price:,.2f} ‚ÇΩ",
            delta=f"{difference_percent:.2f}%" if is_real else None,
        )

    with col2:
        st.metric(
            label="–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" if is_real else "N/A",
            value=f"{real_price:,.2f} ‚ÇΩ" if is_real else "N/A",
        )

    st.divider()

    if is_real:
        if difference > 0:
            st.success(
                f"üí∞ –í—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –≠–∫–æ–Ω–æ–º–∏—è: **{difference:,.2f} ‚ÇΩ** "
                f"(*{difference_percent:.2f}% –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
            )
        else:
            st.error(
                f"üö´ –ù–µ –≤—ã–≥–æ–¥–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å! –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{-difference:,.2f} ‚ÇΩ** "
                f"(*{abs(difference_percent):.2f}% –≤—ã—à–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏*)."
            )
    else:
        st.success(f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{predicted_price:,.2f} ‚ÇΩ**")
